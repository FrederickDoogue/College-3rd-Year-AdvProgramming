#ifdef _DEBUG 
#pragma comment(lib,"sfml-graphics-d.lib") 
#pragma comment(lib,"sfml-audio-d.lib") 
#pragma comment(lib,"sfml-system-d.lib") 
#pragma comment(lib,"sfml-window-d.lib") 
#pragma comment(lib,"sfml-network-d.lib") 
#else 
#pragma comment(lib,"sfml-graphics.lib") 
#pragma comment(lib,"sfml-audio.lib") 
#pragma comment(lib,"sfml-system.lib") 
#pragma comment(lib,"sfml-window.lib") 
#pragma comment(lib,"sfml-network.lib") 
#endif 

#include <SFML/Graphics.hpp>
#include <iostream>
#include <stdlib.h> 
#include <time.h> 
#include <vector>

int main()
{
	//create Window
	sf::RenderWindow window(sf::VideoMode(800, 600), "SFML Sample Code Lab 6");


	sf::Texture pencilTexture;
	pencilTexture.loadFromFile("pencil.png");

	sf::Sprite pencilButton;
	pencilButton.setTexture(pencilTexture);
	pencilButton.setPosition(300, 0);

	int num = 0;
	sf::Font font;
	//arial.ttf must be in the same fodler as this code
	if (!font.loadFromFile("arial.ttf"))
	{
		// error...
	}

	sf::Text exampleText;
	exampleText.setFont(font);
	exampleText.setString("my Art " + std::to_string(num));
	exampleText.setCharacterSize(24);
	exampleText.setFillColor(sf::Color::White);
	bool moving = false;
	bool selected = false;
	const int numOfColourButtons = 4;
	sf::RectangleShape colourButtons[numOfColourButtons];
	sf::RectangleShape block;
	std::vector<sf::RectangleShape> blocks;

	for (int i = 0; i < numOfColourButtons; i++)
	{
		colourButtons[i].setSize(sf::Vector2f(20, 20));
		colourButtons[i].setPosition(10, i * 30 + 100);
	}
	colourButtons[0].setFillColor(sf::Color::Blue);
	colourButtons[1].setFillColor(sf::Color::Red);
	colourButtons[2].setFillColor(sf::Color::Cyan);
	colourButtons[3].setFillColor(sf::Color::Green);
	block.setSize(sf::Vector2f(20, 20));
	block.setFillColor(sf::Color::Red);
	block.setPosition(rand() % 780, rand() % 580);


	// set timePerFrame to 1 60th of a second. 60 frames per second

	sf::Time timePerFrame = sf::seconds(1.0f / 60.0f);
	sf::Time timeSinceLastUpdate = sf::Time::Zero;
	// the clock object keeps the time.
	sf::Clock clock;
	clock.restart();

	while (window.isOpen())
	{
		// check if the close window button is clicked on.
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
		}

		//add to the time since last update and restart the clock
		timeSinceLastUpdate += clock.restart();

		//update every 60th of a second
		//only when the time since last update is greater than 1/60 update the world.

		if (timeSinceLastUpdate > timePerFrame)
		{


			// get keyboard input.
			if (moving == true)
			{
				block.setPosition(sf::Mouse::getPosition(window).x, sf::Mouse::getPosition(window).y);
				if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
				{


					blocks.push_back(block);
					moving = false;
					block.setPosition(-1000, 0);

				}

			}

			if (moving == false)
			{
				if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
				{
					//collision detection
					for (int i = 0; i < numOfColourButtons; i++)
					{

						if (colourButtons[i].getGlobalBounds().contains(sf::Mouse::getPosition(window).x, sf::Mouse::getPosition(window).y))
						{
							block.setFillColor(colourButtons[i].getFillColor());
							selected = true;

						}



					}
				}
				else {
					if (selected == true)
					{
						moving = true;
						selected = false;
					}
				}
			}
			window.clear();
			if (moving == true)
			{
				window.draw(block);
			}
			for (int i = 0; i < blocks.size(); i++)
			{
				window.draw(blocks[i]);
			}
			for (int i = 0; i < numOfColourButtons; i++)
			{
				window.draw(colourButtons[i]);
			}

			window.draw(pencilButton);
			window.draw(exampleText);
			window.display();

			// reset the timeSinceLastUpdate to 0 
			timeSinceLastUpdate = sf::Time::Zero;
		}
	}

	return 0;
}